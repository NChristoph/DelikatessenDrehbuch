@using Microsoft.AspNetCore.Identity
@using System.Web
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> UserManager
@model FullRecipes

<body>
    <div class="minWidth100 flex flexJustifyContendCenter">
        <div class="maxWidth80 minWidth80 mobieleWidth90 mobileCenter ">
            <div class="grid-Selected-Recipe minWidth100 ">
                <h1 class="grid-Title" style="font-family:'Lucida Handwriting';margin-bottom:1rem;text-align:center;color:#D4AF37">@Model.Recipes.Name</h1>

                <img class="grid-Image" src="@Model.Recipes.ImagePath" title="Recipe Image" style="max-width:100%;" />
                <div class="grid-KeyWords flex flexRow flexWrap flexJustifyContendCenter  minWidth100 maxWidth100 mobieleWidth90">
                    <div class="flex flexRow flexWrap flexJustifyContendSpaceBetween  minWidth80 maxWidth80 mobieleWidth90">
                        @{
                            if (Model.QueryHandler != null || !Model.QueryHandler.Any())
                            {
                                foreach (var query in Model.QueryHandler)
                                {
                                    <span>
                                        @query.ToString()
                                    </span>
                                }
                            }

                        }

                    </div>
                </div>


                <p class="grid-LikeCount">Dieses Rezept gefällt @Model.Recipes.LikeCount Benutzern.</p>
                @if (SignInManager.IsSignedIn(User))
                {
                    <a asp-controller="SelectedRecipe" asp-action="AddOrRemoveLike" asp-route-id="@Model.Recipes.Id" class="btn bgRed Border-Gold grid-Likebutton " typeof="Button" title="Like Button" style="width:100px;height:max-content;padding:0.35rem;margin-left:auto;">
                        @{
                            Like like = Model.Likes.SingleOrDefault(x => x.UserMail == User.Identity.Name && x.Recipe == Model.Recipes);
                            if (like != null)
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star-fill" viewBox="0 0 16 16" style="color:#FFFDD0">
                                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                </svg>
                            }
                            else
                            {
                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-star" viewBox="0 0 16 16" style="color:#FFFDD0">
                                    <path d="M2.866 14.85c-.078.444.36.791.746.593l4.39-2.256 4.389 2.256c.386.198.824-.149.746-.592l-.83-4.73 3.522-3.356c.33-.314.16-.888-.282-.95l-4.898-.696L8.465.792a.513.513 0 0 0-.927 0L5.354 5.12l-4.898.696c-.441.062-.612.636-.283.95l3.523 3.356-.83 4.73zm4.905-2.767-3.686 1.894.694-3.957a.565.565 0 0 0-.163-.505L1.71 6.745l4.052-.576a.525.525 0 0 0 .393-.288L8 2.223l1.847 3.658a.525.525 0 0 0 .393.288l4.052.575-2.906 2.77a.565.565 0 0 0-.163.506l.694 3.957-3.686-1.894a.503.503 0 0 0-.461 0z" />
                                </svg>
                            }
                        }

                    </a>
                }
                <hr class="grid-hr" />
                <div class="grid-ingredient minWidth90 mobieleWidth90 flex flexJustifyContendCenter ">
                   <ul class="minWidth100 mobieleWidth90" style="list-style-type:none;padding-left:0;">
                        @{
                            foreach (var ingredient in Model.IngredientHandler)
                            {

                                <li class="Bg-Cream Border-Gold mb-1 flex flexJustifyContendCenter" style="border-radius:0.25rem">

                                    <span style="text-align:end;color:#D4AF37;width:50px">
                                        <span style="margin-right:10px">
                                            @ingredient.Quantity.Quantitys
                                        </span>
                                    </span>
                                    <span style="color:#D4AF37;width:105px ">@ingredient.Measure.UnitOfMeasurement</span>
                                    <span style="color:#D4AF37;width:150px"> @ingredient.Ingredient.Name</span>
                                </li>
                            }
                        }

                    </ul>
                    
                       
                    

                   



                </div>


                <p class="grid-Preparation">@Model.Recipes.Preparation</p>



                @{
                    @if (SignInManager.IsSignedIn(User))
                    {
                        <a class="btn bgRed mb-2 grid-Button" href="#" onclick="MessageModalShow('@Model.Recipes.GetType().Name',@Model.Recipes.Id,'@User.Identity.Name')" style="color:#FFFDD0;width:max-content;margin-right:auto">Rezept melden</a>

                        <!-- Button trigger modal -->
                        <button type="button" data-bs-toggle="modal" data-bs-target="#exampleModal" typeof="Button" title="Rating Button" class="btn bgRed mb-2 grid-Button" style="width:max-content;margin-left:auto;color:#FFFDD0;">
                            Bewerten

                        </button>
                    }
                    else
                    {
                        <Button type="Button" href="#" title="Rating Button" class="btn bgRed Border-Gold m-4 grid-Button" style="width:max-content;color:#FFFDD0" disabled>Zum Bewerten Einloggen</Button>

                    }

                }

            </div>


        </div>


    </div>



    <!-- Modal -->
    <div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h1 class="modal-title fs-5" id="exampleModalLabel">Bewerten</h1>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="w100 flex acenter jcenter ">
                        <form class=" minWidth100 flex flexColumn acenter" asp-controller="SelectedRecipe" asp-action="SaveRecessionInDB">
                            <input value="@Model.Recipes.Id" id="id" name="id" hidden />

                            <textarea class="w100 " id="assessment" name="assessment" style="min-height:25vh"></textarea>
                            <button type="submit" title="Rating Button" class="btn bgRed mb-2 grid-Button mt-1" style="width:max-content;margin-left:auto;color:#FFFDD0;">Bewerten</button>
                        </form>
                    </div>
                </div>

            </div>
        </div>
    </div>



    @{
        var reverseList = Model.Recession;
        reverseList.Reverse();
        foreach (var recessionFromDb in reverseList)
        {

            string email = recessionFromDb.UserEmail.Substring(0, 5) + "*******";
            var createTime = DateOnly.FromDateTime(recessionFromDb.CreationDate);
            <div class="minWidth100 flex flexJustifyContendCenter">
                <div class="card Border-Gold maxWidth80 minWidth80 mobieleWidth90 mb-3 ">
                    <div class="card-header flex flexRowToColumn jspaceBetween flexWrap bgRedGardien" style="color:#FFFDD0">
                        <div class="minWidth40">
                            @email
                        </div>
                        <div class="minWidth40 flex flexJustifyContendEnd">
                            @createTime
                        </div>

                    </div>
                    <div class="card-body  Bg-Cream">
                        @recessionFromDb.Assessment
                    </div>
                    @{
                        @if (SignInManager.IsSignedIn(User))
                        {
                            <div class=" card-footer Bg-Cream minWidth100 flex ">
                                <a class="btn bgRed mb-2 " href="#" onclick="MessageModalShow('@recessionFromDb.GetType().Name',@recessionFromDb.Id,'@User.Identity.Name')" style="color:#FFFDD0;width:max-content;margin-left:auto">Bewertung melden</a>

                            </div>
                        }
                    }

                </div>
            </div>



        }
    }
</body>




